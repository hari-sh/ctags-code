{"version":3,"file":"extension.js","mappings":"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","sources":["webpack://ctags-code/external commonjs \"level\"","webpack://ctags-code/./src/tagutils.js","webpack://ctags-code/external commonjs \"vscode\"","webpack://ctags-code/./src/extension.js","webpack://ctags-code/./src/dbutils.js","webpack://ctags-code/external node-commonjs \"readline\"","webpack://ctags-code/external node-commonjs \"fs\"","webpack://ctags-code/external node-commonjs \"path\"","webpack://ctags-code/webpack/bootstrap","webpack://ctags-code/webpack/startup"],"sourcesContent":["module.exports = require(\"level\");","const {getValueFromDb, getDB, batchWriteIntoDB} = require('./dbutils');\nconst vscode = require('vscode');\nconst fs = require('fs');\nconst readline = require('readline');\nconst path = require('path');\n\nasync function getPattern(filePath, name, canceller, pattern, matchWhole) {\n    const fileStream = fs.createReadStream(filePath);\n    const rl = readline.createInterface({\n    input: fileStream,\n    crlfDelay: Infinity\n    });\n    let lno = 0\n    let charPos = 0\n    let found = false\n    for await (const line of rl) {\n        lno += 1\n        if ((matchWhole && line === pattern) || line.startsWith(pattern)) {\n            found = true\n            charPos = Math.max(line.indexOf(name), 0)\n            console.log(`ctags-code: Found '${pattern}' at ${lno}:${charPos}`)\n            return {retval:false, found, lno, charPos}\n        } else if (canceller && canceller.isCancellationRequested) {\n            console.log('ctags-code: Cancelled pattern searching')\n            return {retval:false, found, lno, charPos}\n        }\n    }\n}\n\n\nasync function getlno(entry, document, sel, canceller) {\n    if (entry.tagKind === 'F') {\n        return await getFilelno(document, sel)\n    }\n    else {\n        return await getlnoPattern(entry, canceller)\n    }\n}\n\nasync function getlnoPattern(entry, canceller) {\n    let matchWhole = false\n    let pattern = entry.pattern\n    if (pattern.startsWith(\"^\")) {\n        pattern = pattern.substring(1, pattern.length)\n    } else {\n        console.error(`ctags-code: Unsupported pattern ${pattern}`)\n        return;\n    }\n\n    if (pattern.endsWith(\"$\")) {\n        pattern = pattern.substring(0, pattern.length - 1)\n        matchWhole = true\n    }\n    console.log(pattern);\n    const ldata = await getPattern(entry.file, entry.name, canceller, pattern, matchWhole);\n    console.log(ldata);\n    if (ldata.found) {\n        return new vscode.Selection(ldata.lno - 1, ldata.charPos, ldata.lno - 1, ldata.charPos)\n    }\n}\n\nasync function getFilelno(document, sel) {\n    let pos = sel.end.translate(0, 1)\n    let range = document.getWordRangeAtPosition(pos)\n    if (range) {\n        let text = document.getText(range)\n        if (text.match(/[0-9]+/)) {\n            const lno = Math.max(0, parseInt(text, 10) - 1)\n            let charPos = 0\n\n            pos = range.end.translate(0, 1)\n            range = document.getWordRangeAtPosition(pos)\n            if (range) {\n                text = document.getText(range)\n                if (text.match(/[0-9]+/)) {\n                    charPos = Math.max(0, parseInt(text) - 1)\n                }\n            }\n            console.log(`ctags-code: Resolved file position to line ${lno + 1}, char ${charPos + 1}`)\n            return new vscode.Selection(lno, charPos, lno, charPos)\n        }\n    }\n}\n\nasync function openAndReveal(context, editor, document, sel) {\n    const doc = await vscode.workspace.openTextDocument(document);\n    const showOptions = {\n        viewColumn: editor ? editor.viewColumn : vscode.ViewColumn.One,\n        selection: sel\n    };\n    return await vscode.window.showTextDocument(doc, showOptions);\n}\n\nasync function revealCTags(context, editor, entry) {\n    if (!entry) {\n        return\n    }\n    const document = editor ? editor.document : null\n    const triggeredSel = editor ? editor.selection : null;\n    const sel = await getlno(entry, document, triggeredSel);\n    return openAndReveal(context, editor, entry.file, sel);\n}\n\nfunction getTag(editor) {\n    const tag = editor.document.getText(editor.selection).trim()\n    if (!tag) {\n        const range = editor.document.getWordRangeAtPosition(editor.selection.active);\n        if (range) {\n            return editor.document.getText(range);\n        }\n    }\n    return tag;\n}\n\nasync function jumputil(editor, context, key) {\n    // if (!editor) return;\n    if (!key) return;\n    const value = await getValueFromDb(`tag:${key}`);\n    if (value) {\n        console.log('Found:', value);\n        const options = [value].map(tag => {\n            if (!path.isAbsolute(tag.file)) {\n                tag.file = path.join(vscode.workspace.rootPath, tag.file)\n            }\n            tag.description = \"\"\n            tag.label = tag.file\n            tag.detail = tag.pattern\n            tag.lno = 0\n            return tag\n        });\n        if (!options.length) {\n            return vscode.window.showInformationMessage(`ctags-code: No tags found for ${tag}`)\n        } else if (options.length === 1) {\n            return revealCTags(context, editor, options[0])\n        } else {\n            return vscode.window.showQuickPick(options).then(opt => {\n                return revealCTags(context, editor, opt)\n            })\n        }\n    } else {\n        console.log('Key not found');\n    }\n}\n\nfunction tokenizeTags(str) {\n  return str\n    .replace(/([a-z])([A-Z])/g, '$1 $2')     // split camelCase & PascalCase\n    .replace(/([A-Z])([A-Z][a-z])/g, '$1 $2')// split ALLCAPS to TitleCase\n    .replace(/[_\\-]+/g, ' ')                 // replace snake_case & kebab-case with space\n    .toLowerCase()\n    .split(/\\s+/)                            // split on whitespace\n    .filter(Boolean);\n}\n\nasync function storeTagsToDB(tagsfile)    {\n    const fileStream = fs.createReadStream(tagsfile);\n    const rl = readline.createInterface({ input: fileStream, crlfDelay: Infinity });\n    const db = getDB();\n\n    const batchSize = 1000;\n    let batchOps = [];\n\n    for await (const line of rl) {\n        if (line.startsWith('!')) continue;\n\n        const parts = line.split('\\t');\n        if (parts.length < 3) continue;\n\n        const [tagName, file, pattern, tagKind] = parts;\n        const matches = [...pattern.matchAll(/\\/(.*?)\\//g)].map(m => m[1]);\n\n        batchOps.push({\n            type: 'put', \n            key: `tag:${tagName}`,\n            value: {\n                file,\n                pattern: matches[0],\n                tokens: tokenizeTags(tagName),\n                tagKind\n            }\n        });\n\n        if (batchOps.length >= batchSize) {\n            await batchWriteIntoDB(batchOps);\n            batchOps = [];\n        }\n    }\n\n    if (batchOps.length > 0) {\n        await batchWriteIntoDB(batchOps);\n    }\n\n    await db.close();\n    await db.open();\n\n    vscode.window.showInformationMessage('Tags are parsed');\n}\n\nmodule.exports = {jumputil ,getTag, storeTagsToDB};\n","module.exports = require(\"vscode\");","const vscode = require('vscode');\nconst path = require('path');\nconst fs = require('fs');\nconst {jumputil, getTag, storeTagsToDB} = require('./tagutils');\nconst {initDB, closeDB, getEntriesWithPrefix, assignIdsToVariables, searchQuery, exportVariablesToJson} = require('./dbutils');\n\nasync function parseAndStoreTags() {\n    await storeTagsToDB(path.join(vscode.workspace.rootPath, 'tags'));\n    await assignIdsToVariables();\n    await exportVariablesToJson(path.join(vscode.workspace.rootPath, 'variables.json'));\n}\n\nasync function handleSearchTagsCommand(context) {\n  const quickPick = vscode.window.createQuickPick();\n  quickPick.placeholder = 'Search tags...';\n  quickPick.matchOnDescription = true;\n  quickPick.filterItems = false;\n  quickPick.matchOnDescription = false;\n  quickPick.matchOnDetail = false;\n\n  quickPick.onDidChangeValue(async (input) => {\n    if (!input) {\n      quickPick.items = [];\n      return;\n    }\n\n    const items = await searchQuery(input);\n    quickPick.items = items.map(r => ({\n    label: r.label,\n    description: r.description,\n    alwaysShow: true\n  }));\n  });\n\n  quickPick.onDidAccept(() => {\n    const selected = quickPick.selectedItems[0];\n    if (selected) {\n      jumputil(vscode.window.activeTextEditor, context, selected.label)\n    }\n    quickPick.hide();\n  });\n\n  quickPick.onDidHide(() => quickPick.dispose());\n  quickPick.show();\n}\n\nasync function jump2tag(context) {\n    const editor = vscode.window.activeTextEditor\n    const tag = getTag(editor)\n    return jumputil(editor, context, tag)\n}\n\nmodule.exports = {\n  activate(context) {\n    initDB();\n    context.subscriptions.push(vscode.commands.registerCommand('extension.storeTags', parseAndStoreTags));\n    context.subscriptions.push(vscode.commands.registerCommand('extension.searchTags', handleSearchTagsCommand));\n    context.subscriptions.push(vscode.commands.registerCommand('extension.jumpTag', jump2tag));\n  },\n  deactivate() {\n    closeDB();\n  }\n};","const path = require('path');\nconst { Level } = require('level');\nconst vscode = require('vscode');\nconst fs = require('fs');\n\nlet db;\nconst dbpath = path.join(vscode.workspace.rootPath, 'tagsdb')\n\nfunction initDB() {\n  if (!db) {\n    db = new Level(dbpath, { valueEncoding: 'json' });\n  }\n  return db;\n}\n\nfunction getDB() {\n  if (!db) throw new Error('DB is not initialized.');\n  return db;\n}\n\nfunction closeDB() {\n  if (!db) throw new Error('DB is not initialized.');\n  db.close();\n}\n\nasync function getValueFromDb(key) {\n  try {\n    const value = await db.get(key);\n    return value;\n  } catch (err) {\n    if (err.notFound) {\n      return null;\n    } else {\n      throw err;\n    }\n  }\n}\n\nasync function getEntriesWithPrefix(prefix, limit = 10) {\n  const entries = [];\n  const iterator = db.iterator({\n    gte: prefix,\n    lte: prefix + '\\xff',\n    keyEncoding: 'utf8',\n    valueEncoding: 'json'\n  });\n\n  try {\n    for await (const [key, value] of iterator) {\n      entries.push({ key, value });\n      if (entries.length >= limit) break;\n    }\n  } catch (err) {\n    console.error('Iterator error:', err);\n    throw err;\n  } finally {\n    await iterator.close();\n  }\n  return entries;\n}\n\nasync function batchWriteIntoDB(data) {\n  try {\n    await db.batch(data);\n  } catch (err) {\n    console.error('Batch write failed:', err);\n  }\n}\n\nconst tokenize = (name) => {\n  return name\n    .replace(/\\.[a-zA-Z0-9]+$/, '')         // remove trailing file extensions like .c, .h, .cpp\n    .replace(/([a-z])([A-Z])/g, '$1 $2')    // camelCase → split\n    .replace(/[_\\-\\.\\/]+/g, ' ')            // snake_case, kebab-case, dot-separated, paths\n    .replace(/[^a-zA-Z0-9 ]/g, '')          // remove other symbols\n    .toLowerCase()\n    .split(/\\s+/)\n    .filter(Boolean);\n};\n\nconst searchQuery = async (query) => {\n  const terms = tokenize(query);\n  if (terms.length === 0) return [];\n  if(terms.length === 2)  {\n    console.log();\n  }\n  const idSets = [];\n\n  for (const term of terms) {\n    const ids = new Set();\n\n    for await (const [key, value] of db.iterator({ gte: `token:${term}`, lt: `token:${term}~` })) {\n      if (Array.isArray(value)) {\n        for (const id of value) {\n          if (typeof id === 'number' && Number.isInteger(id)) {\n            ids.add(id);\n          }\n        }\n      }\n      if (ids.size >= 1000) break;\n    }\n\n    if (!ids.size) return []; // no match for one term → no result\n    idSets.push(ids);\n  }\n\n  // Perform set intersection manually\n  let intersection = idSets[0];\n  for (let i = 1; i < idSets.length; i++) {\n    intersection = new Set([...intersection].filter(id => idSets[i].has(id)));\n    if (!intersection.size) return []; // short-circuit if nothing left\n  }\n\n  // Fetch matching variables\n  const results = [];\n  for (const id of intersection) {\n    if (results.length >= 10) break;\n    try {\n      const variableName = await db.get(`id:${id}`);\n      const meta = await db.get(`tag:${variableName}`);\n      results.push({\n        label: variableName,\n        description: meta?.file || ''\n      });\n    } catch {\n      // skip invalid entries\n    }\n  }\n\n  return results;\n};\n\n\nconst assignIdsToVariables = async () => {\n  let idCounter = 1;\n  const tokenMap = new Map();\n  const batch = db.batch();\n\n  for await (const [key, value] of db.iterator({ gte: 'tag:', lt: 'tag;' })) {\n    const variableName = key.slice(4);\n    const newId = idCounter++;\n\n    // batch.put(key, { id: newId, value: value.value });\n    batch.put(`id:${newId}`, variableName);\n\n    for (const token of tokenize(variableName)) {\n      if (!tokenMap.has(token)) tokenMap.set(token, new Set());\n      tokenMap.get(token).add(newId);\n    }\n  }\n\n  for (const [token, ids] of tokenMap) {\n    batch.put(`token:${token}`, Array.from(ids));\n  }\n\n  batch.put('id:counter', idCounter - 1);\n\n  await batch.write();\n  console.log(`✅ Assigned IDs to ${idCounter - 1} variables and built token index.`);\n};\n\nconst saveJson = (filename, data) => {\n  const json = JSON.stringify(data, null, 2);\n\n  fs.writeFile(filename, json, 'utf8', (err) => {\n    if (err) {\n      console.error('❌ Failed to write JSON:', err);\n    } else {\n      console.log(`✅ Saved to ${filename}`);\n    }\n  });\n};\n\nconst exportVariablesToJson = async (outputPath) => {\n  const results = [];\n\n  for await (const [key, value] of db.iterator()) {\n    results.push({ key, value });\n  }\n\n  saveJson(outputPath, JSON.stringify(results, null, 2));\n\n  console.log(`✅ Exported ${results.length} variables to ${outputPath}`);\n};\n\nmodule.exports = { initDB, getDB, closeDB, getValueFromDb, getEntriesWithPrefix, batchWriteIntoDB, searchQuery, assignIdsToVariables, exportVariablesToJson };\n","module.exports = require(\"readline\");","module.exports = require(\"fs\");","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(497);\n"],"names":["module","exports","require","getValueFromDb","getDB","batchWriteIntoDB","vscode","fs","readline","path","async","revealCTags","context","editor","entry","document","triggeredSel","selection","sel","canceller","tagKind","pos","end","translate","range","getWordRangeAtPosition","text","getText","match","lno","Math","max","parseInt","charPos","console","log","Selection","getFilelno","matchWhole","pattern","startsWith","error","substring","length","endsWith","ldata","filePath","name","fileStream","createReadStream","rl","createInterface","input","crlfDelay","Infinity","found","line","indexOf","retval","isCancellationRequested","getPattern","file","getlnoPattern","getlno","doc","workspace","openTextDocument","showOptions","viewColumn","ViewColumn","One","window","showTextDocument","openAndReveal","jumputil","key","value","options","map","tag","isAbsolute","join","rootPath","description","label","detail","showQuickPick","then","opt","showInformationMessage","getTag","trim","active","storeTagsToDB","tagsfile","db","batchOps","parts","split","tagName","matches","matchAll","m","push","type","tokens","str","replace","toLowerCase","filter","Boolean","close","open","initDB","closeDB","getEntriesWithPrefix","assignIdsToVariables","searchQuery","exportVariablesToJson","parseAndStoreTags","handleSearchTagsCommand","quickPick","createQuickPick","placeholder","matchOnDescription","filterItems","matchOnDetail","onDidChangeValue","items","r","alwaysShow","onDidAccept","selected","selectedItems","activeTextEditor","hide","onDidHide","dispose","show","jump2tag","activate","subscriptions","commands","registerCommand","deactivate","Level","dbpath","tokenize","valueEncoding","Error","get","err","notFound","prefix","limit","entries","iterator","gte","lte","keyEncoding","data","batch","query","terms","idSets","term","ids","Set","lt","Array","isArray","id","Number","isInteger","add","size","intersection","i","has","results","variableName","meta","idCounter","tokenMap","Map","slice","newId","put","token","set","from","write","outputPath","filename","json","JSON","stringify","writeFile","saveJson","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__"],"sourceRoot":""}